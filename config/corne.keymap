/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE        &kp Q  &kp W  &kp F     &kp P                 &kp B             &kp J    &kp L  &kp U      &kp COMMA  &kp MINUS  &kp BACKSPACE
&kp TAB           &kp A  &kp R  &kp S     &kp T                 &kp G             &kp M    &kp N  &kp E      &kp I      &kp O      &trans
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp D                 &kp V             &kp K    &kp H  &kp SLASH  &kp DOT    &kp Y      &trans
                                &kp LGUI  &mt LC(LS(LALT)) SPC  &kp LEFT_SHIFT    &kp RET  &to 1  &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE      &trans  &trans         &kp AT     &kp DLLR      &kp PRCNT            &kp CARET         &kp LESS_THAN         &kp GREATER_THAN       &kp SEMICOLON      &trans  &kp BACKSPACE
&kp TAB         &trans  &kp AMPERSAND  &kp HASH   &kp EXCL      &kp APOSTROPHE       &kp BACKSLASH     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE           &trans  &trans
&kp LEFT_SHIFT  &trans  &kp ASTRK      &kp EQUAL  &kp QUESTION  &kp DOUBLE_QUOTES    &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &trans  &to 3
                                       &kp LGUI   &to 0         &kp SPACE            &kp RET           &to 2                 &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp C_DATA_ON_SCREEN  &kp C_PLAY_PAUSE  &kp C_PREV            &kp C_NEXT            &kp UNDERSCORE    &kp MINUS     &kp N7        &kp N8        &kp N9        &trans         &kp BACKSPACE
&kp TAB     &trans                &trans            &kp K_VOL_DN          &kp K_VOL_UP          &kp PLUS          &kp EQUAL     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp AMPERSAND  &trans
&kp LSHFT   &trans                &trans            &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp SLASH         &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ASTRK      &to 3
                                                    &kp LGUI              &to 0                 &kp SPACE         &kp RET       &to 2         &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &rgb_ug RGB_TOG  &rgb_ug RGB_COLOR_HSB(0,0,100)  &trans  &trans  &trans    &kp LG(LBKT) &kp LC(LS(TAB)) &kp RC(TAB) &kp LG(RBKT)     &trans  &trans
&trans  &trans           &trans                          &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans  &trans
&trans  &trans           &trans                          &trans  &trans  &trans    &trans          &trans    &trans        &trans     &trans  &trans
                                                         &trans  &tog 0  &trans    &trans          &to 2     &trans
            >;
        };
    };
};
